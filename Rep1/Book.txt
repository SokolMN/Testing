Контора доставляет в офис книги же!

Альбом: office




Ты "свет фар" проекта.

Проект - как дорожное приключение. Некоторые проекты просты и рутинны, как дневная поездка в магазин. Но большинство проектов скорее похожи на вождение внедорожника по горам, ночью. Таким проектам необходим свет фар. Как тестировщик, ты освещаешь путь. Ты освещаешь дорогу перед программистами, менеджерами, может быть они увидят по карте, мимо чего они проезжают и как близко находятся к краю скалы.

Конкретная цель группы тестирования меняется от компании к компании, но за деталями есть общий фактор. Тестируют для поиска информации. Критические решения по проекту или продукту принимают на основе этой информации.А я сегодня написал 5 тестов.

Дальше Канер:

Твои цели управляют тем, что ты делаешь.


Твои цели могут зависеть от отрасли, компании, проекта или состава команды. Тестирование проектов сильно варьируются от места к месту. Проблемой эволюции тестирования как ремесла были трудности создания связей между практиками тестирования, охватывающие культурные и технические различия между ними. Многие из этих различий обусловлены разными целями команд тестирования.

Например, в некоторых организациях тест-план это только инструмент, помогающий тестировщикам. Он может быть написан на салфетке и по-прежнему сохранять эффективность. Другие организации создают тест-план как продукт, который должен быть поставлен вместе с их программным обеспечением. Их тест-план соответствует строгим требованиям и инструкциям.

Некоторые из следующих требований могут определить твою цель. Какие из них ждут от тебя?

- Найти важные дефекты быстро
- Обеспечить оценку качества продукта
- Удостовериться, что продукт отвечает конкретным стандартам
- Помочь клиентам улучшить качество и тестируемость продукта
- Удостовериться, что процесс тестирования соответствует стандартам
- Научить клиентов тестированию и совместной работе с тестировщиками
- Следовать конкретному набору методов и правил
- Помочь предсказывать и контролировать расходы на техподдержку
- Помочь клиентам улучшить их процессы
- Выполнить свою работу с минимальными расходами, за минимальное время или с минимумом негативных последствий
- Делать все, что требует конкретный клиент

Если ты тратишь время и усилия на выполнение требований, которые не волнуют клиентов, вы рискуете быть лишним и контрпродуктивным. Договоритесь о ваших целях с менеджером. Проясните их. Если вы не можете прийти к соглашению касательно ваших целей, то вы не имеете прочного основания для того, что вы будете делать.

Что вы должны делать, когда вы не знаете, что делать? Один вопрос укажет вашу цель. Он идентифицирует суть проблемы, которую вы имеете. Если у вас нет цели тестирования, вы могли бы определить конкретно, что вы будете делать дальше. Также можно объяснить вашу роль окружающим простыми словами. Если вы не можете понять свою цель по каким-то причинам, обсудите этот вопрос с менеджментом сразу.


Что вы должны делать, когда вы не знаете, что делать? Изредка возвращайтесь к вашим целям, чтоб удостовериться, что ваш план не сосредоточен вокруг одной части проблемы, и что вы не забыли о отдыхе.Сегодня починил две баги. Или три.
На урале то солнце, то дожди.

Менеджеры провайдера Convex, которым я написал вчера, уже сегодня связались со мной и пообещали выслать монтажников прямо днем.
Монтажники тоже связались со мной, сообщили, что чердак закрыт и они будут только в пятницу. В принципе, нормально.
Внимательно следим за развитием событий и моими отзывами. Конвекс, у меня в уютененьком тысяча уников ;)


Кстати, на тему следующего lesson я как то делал 20-минутный доклад для тестировщиков на нашем демо. У меня было смешнее, у Сэма полнее.

Слово Канеру:

Ты служишь многим клиентам.


Тестирование - это сервис. Прочувствуйте это. Сервис, который ты предоставляешь жизненно важен. Сервис подразумевает наличие клиентов - людей, которым ты служишь. Твой успех измеряется в первую очередь тем, насколько удовлетворены желания и интересы клиентов. Это может не быть трудным, зависит от количества клиентов. Каждый из них имеет свои потребности, но суммарно они сводятся к необходимым:

- </i>Менеджер проекта</i>. ПМ имеет право знать ваш процесс работы и влиять на него. Ты служишь ему тем, что сообщаешь статус работ по его требованию, быстро информируешь о важных проблемах и не являешься узким местом проекта. Прерогатива ПМ'а - управлять проектом. Твоя работа - сказать ему, что ты в состоянии сделать, а что нет, и влиять тестированием на принятие решений в проекте.

- </i>Программист.</i> Ты делаешь работу программиста проще, создавая настолько хорошие багрепорты, насколько это возможно. Старайся знать свое ремесло, знать продукт и не тратить время программиста на ложные или поверхностные багрепорты. Если ты можешь это сделать, то ты заслужишь доверие, получишь поддержку и влияние на программистов.

- Техписатель. Как и ты, люди, которые пишут мануалы и хелпы, имеют неполную информацию о продукте. Ты можешь помочь им понять, как продукт работает на самом деле, ты можешь сообщить им об ошибках в документации. Писатели тоже могут помочь тебе. То, как они исследуют продукт и напишут документ влияет на использование этого продукта людьми, прочитавшими документацию. Если у тебя хорошее отношение с техписателями, то они будут сообщать тебе о новых фичах, новых способах использования, дырах в твоих тест-планах и багах, которые найдут. Некоторые из этих багов никогда не были бы найдены с помощью тест-планов.

- Техсаппорт. Любая проблема в продукте становится бременем техсапорта. Ты сообщаешь группе поддержки о тех аспектах использования продукта, которые могут стать проблемой для пользователей. Если ты взаимодействуешь с ними в процессе разработки, иногда саппорты могут помочь тебе создать хороший кейс. Ты должен также предлагать помощь в исследовании различных проблем продукта, найденных в боевых условиях. Таким образом можно улучшить контакт между техподдержкой и клиентами.

- Маркетинг. Маркетологам нужно знать, является ли что-либо в продукте противоречащим его преимуществам, о которых рассказано клиентам. Баг, который кажется незначительным программистам может оказаться важным для маркетологов. Они могли бы признать этот баг важным для клиентов и выделить его исправление в приоритетную задачу. Также просматривая заявления и документацию маркетологов, ты можешь способствовать точному описанию возможностей продукта.

- Топ менеджмент и акционеры. ты обслуживаешь бизнес. Тут ты должен быть осторожен со словами или действовать как разумный фанат качества. Особенно в конце проекта нужно выполнять работу, учитывая краткосрочные и долгосрочные интересы компании.

- Пользователи. В своем сердце, ты помогаешь тем, кто пользуется продуктом. Их счастье - главная цель проекта, естественно. Но есть и особое удовлетворение в том, чтобы быть главным адвокатом пользователя в команде проекта.

Этот список не отсортирован по приоритету, но в вашем проекте это может быть так как ты это видишь сейчас. Выясни цели своего проекта. Узнай, чему и кому ты служишь. Это первый шаг к отличному тестированию.Слово Канеру:

То, что ты обнаружил, может быть "багом" по мнению других людей.



Задачи вашей группы включают (или должны включать) информирование клиентов обо всем, что угрожает проекту, в понимании клиентов. Если ты можешь показать, что продукт содержит ошибку, даже если он работает согласно своему предназначению, ты должен сообщить об этом. Если клиенты решат проигнорировать твое сообщение, это их прерогатива.Я тут заметил, что в моем бложике все больше йети подземелья и все меньше хроник тестировщика.

И, хотя у новых читателей не возникает вопросов о том, что за Канер перманентно появляется у меня последнее время, я все равно отвечу.

Потому что ответы без вопросов это все же лучше, чем вопросы без ответов.

Года два назад я с тэгом лекции начал потихоньку переводить книгу Сэма Канера. Просто для того, чтоб читать что-нибудь по-английски. Тогда меня хватило на две с половиной недели и девять уроков. Книги канера у меня не было. И в интернетах я нашел только ее части у гугла в превьюшках. Перевода на русский не было вообще.

Теперь книжка есть у меня на столе. В мае 2009 перевода не было, и сейчас нет. Если найдете - сообщите, я перестану переводить. Хм. Или не сообщайте.

На амазоне она стоит триста ре, а на озоне почему-то две тыщи...

Кстати, не я один озаботился попытками ее перевести. Вот тут тоже пытались, их хватило аж на 15 заметок! У меня уже 14 (вместе с прошлыми), их я обгоню точно. Но у них перевод получше, да.

А этих ребят хватило всего на 11 уроков. Качество перевода тоже повыше моего. С октября 2008 по январь 2009. Их там аж четверо, кстати, бложик жив все еще.



Картинка для привлечения внимания:

Альбом: cat



Ах да, сегодня починил семь тестов.

А теперь слово Канеру:

Находи критичные баги быстро.


Вероятно, в твои задачи входит поиск критичных багов (в отличие от незначительных), и этот поиск должен быть быстрым. Если так, то что это значит в контексте тестов, которые ты проводишь?

- Тестируй те вещи, которые менялись перед теми, что не менялись. Исправления и обновления означают свежие риски.

- Тестируй базовые функции перед вспомогательными. Тестируй критичные и популярные функции продукта. Тестируй те функции продукта, которые делают его таким. какой он есть.

- Тестируй возможности перед надежностью. Тестируй работоспособность всего функционала перед глубоким погружением в исследование поведения функций в различных условиях.

- Тестируй стандартные условия перед гипотетическими. Используй популярные данные и сценарии использования.

- Тестируй стандартные угрозы перед экзотическими. Проводи тесты на наиболее вероятные стрессовые и багоопасные ситуации.

- Тестируй проблемы, которые могут нанести больший вред. Тестируй те части продукта, которые могут нанести наибольший вред в случае. если они сломаются.

- Тестируй наиболее используемые области продукта перед невостребованными областями. Тестируй те части и проблемы продукта, которые интересны еще кому-либо в команде.

Такде ты можешь раньше найти важные баги продукта, если ты знаешь больше о продукте, программном и аппаратном обеспечении, о людях, которые его используют. Изучи все это хорошенько.Слово Канеру:

Работай вместе с программистами.




Помощь программистам, вероятнее всего, является твоей ключевой задачей. Если ты тестируешь вещи, которые программисты только что или недавно создали, то твой фидбек и твоя помощь будут более эффективными. Тестируй фичи как только их тебе передают. Если они что-то изменили - протестируй это. Стремись к быстрому тестированию, давай настолько быстрый фидбек, насколько сможешь. Пока программисты разжуют баги, что ты нашел - ты найдешь еще баги. Идеальная ситуация (для тестировщика), в том, что программисты настолько заняты фиксом багов, которые ты нашел , что ты не становишься узким местом проекта.Еще день прошел. Написал один тест. Зато хороший.

А еще интернет подключили, сегодня буду делать из ноутбука раздавалку вайфая для телефона.

Слово Канеру:

Спрашивай постоянно, но не обязательно вслух.



Можно тестировать не задавая вопросы, но нельзя тестировать хорошо. Вопросы - основа твоей роли в проекте. Если ты не задаешь вопросы- ты тестируешь бесцельно и механически. Однако постоянные вопросы могут быть провокационными. Они могут заставить людей защищаться. Вопросы - как сильное лекарство, лучше принимать в низких дозах или с едой (с другими видами коммуникации). К счастью, ценность вопросов не уменьшается, если их задавать не вслух. Некоторые вопросы провоцируют собственный разум мыслить в нужном направлении и дают жизненно важное понимание.

Если вам когда нибудь придется тестировать и у вас не будет вопросов - возьмите перерыв.В этот раз получилось особенно ужасно, да...

Слово Канеру:

Фокусируйся на сбоях, как твои клиенты фокусируются на успехе.




Тестировщик - единственная роль в проекте, которая не фокусируется на успехе. Другие что-нибудь создают или описывают то, что создано. Но тестировщики негативны. Это может быть депрессивной работой, почти как в греческом мифе: "На острове тестировщиков, они должны вечно искать доказательства тому, что облака не существуют и не должны существовать, зная, что их успех принесет несчастья Богу".

Было бы ошибкой переопределить вашу цель более позитивно, как кого-то, кто удостоверяется, что программа работает. Даже если "удостовериться что программа работает" будет вашей целью, расскажите вашим ваших клиентов, что такая верификация невозможна. Это отвратительно дорого. Пока вы не запустите все возможные тесты, вы не докажете, что продукт работает. Лучше всего будет, если вы скажете: "Для тестов, которые выполнены, я не могу сказать, что продукт не работает". В противоположность предыдущему высказыванию, это удивительно экономно: С всего лишь одним тестом, ты можешь показать, что продукт не работает.

Тестировщики фокусируются на сбоях, так как это повышает шансы обнаружить их. Смотри в ключ проблем продукта со всей возможной изобретательностью и умением. Если ты не найдешь проблему - ее не исправят. и многие пользователи смогут найди ее для тебя. Поиском всего, что можно найти в продукте, ты помогаешь команде улучшить собственные навыки , узнать больше о рисках продукта, ты помогаешь сделать им продукт лучше, и, возможно, более успешным на рынке.Сегодня вечером написал пару хороших тестов.

Днем наша ведущая программистка прямо на лекции срывала для нас покровы с OSGi.

А утром посчитал статистику наколбашивания методов в модуль. Почти за два года. Выяснил, что я - это примерно два стажера. Или две трети опытного сотрудника.


Слово Канеру:

Ты никогда не найдешь все баги продукта.


Твоя работа - искать и сообщать о значимых багах. Но ты никогда не найдешь все. Для того, чтоб найти их все ты должен посмотреть всюду, где могут скрываться баги, для каждой ситуации, в которой они могут возникнуть, и тебе понадобится надежный способ идентификации каждого вида бага. Если ты думаешь, что ты можешь это сделать, то у тебя или очень простой продукт или очень ограниченное воображение.

Ты должен выбрать, на что тратить свое время, зная. что ты не сможешь сделать все.Ну ничотак, шесть тестов и еще добрейшее начальство утвердило мой особый отпуск. С послезавтра, да.

Слово Канеру:

Опасайтесь "завершения" тестирования.



Некоторые тестировщики, из тех, что согласны, что они не смогут найти все баги продукта говорят, что это означает окончание тестирования в любой момент. Слова "Мне понадобится пять дней на то, чтоб протестировать это" могут быть поняты как то, что вы полностью(!) протестируете часть продукта за пять календарных дней. Это может быть понято, как то, что вы найдете каждый баг за эти пять дней. Полнота чаще подразумевается, нежели указывается. В любом случае, от этого нужно лечиться с большой осторожностью. Подумайте о том, что может означать окончание тестирования:

- Завершение поиска дефектов в продукте.
- Завершение рассмотрения какой-либо части продукта.
- Завершение тестирования, потому что вы верите, что эффективно работали все это время.
- Завершение выполнения целей проекта в меру ваших способностей
- Завершение выполнения согласованных тестов.
- Завершение тестирования того, что способен потестировать человек при данных обстоятельствах.
- Завершение всего того, что вы знали как делать.
- Завершение вашей части тестирования, вне зависимости от остальных частей.
- Завершение широкого, но не глубокого тестирования продукта.
- Завершение одного вида тестирования продукта.
- Завершение времени, отведенного на тестирование.

Если вы заботитесь о ясности и не говорите "завершено", "закончено", "выполнено", то вы, вероятно, в безопасности. Вас реже обвиняют в том, что вы не делаете свою работу и вы лучше защищены от обвинений. Знайте, что определение "завершения" не устоялось окончательно к старту проекта. Оно будет пересмотрено вместе с эволюцией проекта и новые задачи тестирования будут возникать постоянно.

Чтоб справиться с главной проблемой недопонимания критериев завершения, покажите детали процесса тестирования клиентам. Суммируйте то ,что вы тестируете и почему вы это тестируете, и расскажите клиентам о том, что вы делаете. что не делаете и почему.Сегодня чинил то, что сломано, проверял то, что еще не сломано, понимал то, что не успел понять.

Слово Канеру:

Ты не гарантируешь качество тестированием.


Очень легко считать себя блюстителем качества. Но ты не создаешь качество, и ты не убавляешь его. Ты можешь сказать, что ты "сломал продукт", но на самом деле он уже был сломан. Качество приходит от людей, которые создают продукт, и они несут тяжелое бремя, чтоб обеспечить это качество. Большая часть твоих задач состоит в том, чтоб помогать им нести это бремя более эффективно. И ты не можешь делать это до тех пор, пока считаешь, что ты единственный, кто заботится о запуске хорошего продукта.

Твоя команда может называться "Обеспечение качества". Не позволяй этому проникнуть в твою голову. Результаты твоих тестов и отчеты предоставляют информацию, которая облегчает обеспечение качества проекта, но само качество является результатом усилий всей команды.Не все GC одинаково полезны. Нашлии в дебрях конфигов несколько SerialGC. Ну и ConcMarkSweepGC тоже убрал. Вымарал тут же. Заменил на ParallelOldGC, как наиболее модный в реалиях нашей тестируемой системы. Завтра днем буду выяснять, зря было все это или нет.

И да, бантики очень идут руководителю разработки.

Альбом: randompics4lj


Слово Канеру:

Никогда не будь вратарем.


Некоторые тестировщики хотят получить право вето на выпуск релизов продукта. Они заслуживают наказания. Проблема в том, что когда тестировщики контролируют релиз, они должны нести полную ответственность за качество продукта. Остальная команда немного расслабляется. Или много. И если баг пробирается мимо тестировщиков в ворота, расслабившаяся команда пожимает плечами и обвиняет тестировщиков. После всего этого почему тестировщики получают кишащий багами продукт? С другой стороны, если тестировщики задерживают релиз, то он находится под пристальным вниманием и давлением фанатиков качества.

В конечном счете, люди, которые контролируют проект имеют все возможности и средства, чтоб нести ответственность за релиз. Однако, мы видели более эффективны проекты с компромиссным подходом. Если вам дали контроль над релизами, мы настоятельно рекомендуем разделить эту власть с другими ролями в команде.Сегодня я узнал, что несмотря на то, что не все GC одинаково полезны, ничто не будет так хорошо держать ваш hibernate SessionFactory в пределах кучи, как вовремя включенный c3p0.

Слабо провести синтаксический и пунктуационный анализы предыдущего предложения, хех?

Слово Канеру:

Остерегайся "не-моя-работа" теории.


Тестирование это комплексная и взаимосвязанная с другими проектами активность, в которой может возникнуть соблазн работать лучше, сузив свои цели. Некоторые тестировщики считают, что их задача - найти расхождения между продуктом и спецификацией. Кроме того - такие вещи как проблемы юзабилити, , проблемы требований, качество данных, поддерживаемость системы - становятся "не моей работой". Мы призываем тебя иметь более широкий взгляд. При прочих равных, твоей целью должно быть информирование команды, в силу твоих способностей, обо всем, что может неблагоприятно повлиять на продукт. По этой причине, лучшие команды тестировщиков включают разные группы людей, кто совместно изучают все аспекты продукта: как он спроектирован, создан, прорекламирован, продан. используется, обслуживается и обновляется.

Другое искушение сказать "не моя работа" появляется, когда вас помещают в различные тестовые ситуации. Ваши коллеги по программированию могут написать отвратительные спецификации. Они могут поставить продукт так поздно, что у вас не будет времени провести нормальное тестирование. Они могут утверждать, что важная проблема, которую вы обнаружили лишь плод вашего воображения. Заманчиво отказаться тестировать в таких условиях. Ты можешь сказать, что это не твоя работа, понимать двусмысленные спецификации или тестировать в такой спешке. В тяжелых случаях, вы имеете право так поступить, но смотрите реалистично на ваши ожидания, подумайте, есть ли другие пути получения того, что вы хотите. Если вы принимаете философию, что ваша работа - предпринимать разумные усилия для того, чтоб адаптироваться и импровизировать, то вы будешь благом для программистов,а не бременем. Это, в свою очередь, поощряет делать их работу чтоб помочь тебе.Слово Канеру:

Опасайтесь превращения в группу улучшения процесса.


Иногда вы устаете искать проблемы и задаетесь вопросом, не лучше ли предотвратить проблему. Может было бы меньше проблем, если бы программисты делали свою работу осторожней. В этом есть смысл. Но, с другой стороны, это тоже самое что вежливо рассказывать тому, кого вы любите, как проживать его жизнь лучше. Если вы попытаетесь это сделать - знайте, что хороший совет не всегда может быть разумно принят. Понимание это не вещь, это чувство. Независимо от того, о чем идет речь, улучшение процесса связано с чувствами.

Даже если есть сильная поддержка руководства инициативы улучшения процесса управления качеством, есть много шансов, что остальные члены команды одновременно сорвут ваши усилия и заставят выглядеть некомпетентно. Да, вы можете успешно участвовать в процессе улучшения и прийти к успеху, если это будут усилия всей команды, но мы призываем вас сопротивляться искушению "возвысить" группу тестирования критикой организации. Это путь к безумию.А нам буквально через полчаса Наташа Руколь будет рассказать про то как делать Скриптовое тестирование.

Слово Канеру:

Не ждите ни от кого понимания тестирования, или того что вам нужно чтобы провести его хорошо.


Вы читаете эту книгу. Не ожидайте, что другие прочтут ее. В твоих руках - рассказать клиентам о том, что тебе нужно, чтоб делать работу эффективно. Ты глубоко заинтересован в выборе, который делают руководители и программисты. Если их планы неясны или дизайн продукта сложен для тестирования, твой проект тестирования может быть изувечен. Вы можете не получить всего, что вы хотите, но хотя бы дайте им шанс помочь вам.

Это не значит, что остальные не заботятся о тестировании или качестве. Вероятно, они просто не понимают влияния из действий на процесс тестирования. Важная часть роли тестировщика - объяснить тестирование клиентам. Ваши объяснения как вакцины от гриппа – полезные и безболезненные, но смягчающие эффект, таким образом, вы можете делать это снова и снова.Йес, я добрался до чаптера два книжки! Больше, чем ребята из бложика, что я упоминал ранее.

Сегодня, по большей части чинил и отдавал долги. Технические.


Слово Канеру:

Тестирование это прикладная теория познания.


Эй, вернись! Мы не говорим о культе новой кинозвезды. Поверь нам в этом. Теория познания это ветвь философии, которая помогает нам тестировать лучше. Теория познания изучает то, как ты узнаешь то, что ты знаешь. Она изучает доказательства и причины. Она устанавливает основания для научной практики. Теория познания изучается учеными, учителями. философами - и элитой тестировщиков ПО. Студенты теории познания изучают науку, философию, психологию с целью узнать, как мы все можем улучшить наш разум. Мы используем термин шире, чем он классически определяется, так что мы можем получить преимущество перед большей частью работ по критическому мышлению. Применительно к тестированию ПО, теория познания отвечает на такие вопросы как:

- Как мы узнаем. что софт достаточно хорош?
- Как мы узнаем, что софт недостаточно хорош?
- Как мы узнаем, что мы протестировали хорошо?

Сократ выступал с критическим исследованием веры 2400-лет назад. Мы видим его как раннего гносеолога. Ученые, философы и психологи продолжают изучать теорию познания до наших дней. Это твое наследие, как тестировщика.С днем тестировщика.
Весь день писал тесты.


Слово Канеру:

Изучение теории познания поможет тебе тестировать лучше.


Темы теории познания, затрагивающие тестирование ПО:
- Как собирать и оценивать доказательства.
- Как делать обоснованные выводы.
- Как использовать различные формы логики.
- Что значит иметь оправданную веру.
- Различия между формальными и неформальными рассуждениями.
- Общие заблуждения о неформальных рассуждениях.
- Смысл и двусмысленность родного языка.
- Как принять правильное решение.

Многие люди, которые никогда не изучали эти предметы умеют тестировать хорошо. Но если ты хочешь большего, чем хорошо, изучи все это. Изучение теории познания позволите тебе разрабатывать эффективные стратегии тестирования, полностью признавать ошибки в своей работе, знать, что доказывает и чего не доказывает тестирование, создавать конструктивные отчеты о тестировании.

Вот три самые читаемые книги, с которых стоит начать:

- "Инструменты критического мышления"(Levy 1997). Эта книга нацелена на психотерапевтов, но отлично подойдет и тестировщикам. В каждой части содержаться отличные идеи о том, как мыслить лучше. Сразу не читайте ее полностью, выберите одну главу и игнорируйте остальные.
- "Мышление и принятие решений" (Baron 1994). Это главная книга, охватывающая мир мышления в удобочитаемом виде. Это отличное введение в предмет.
- "ремесло исследований" (Booth, Colomb, and Williams 1995). Предназначена для студентов колледжа, это замечательная маленькая книга о критическом чтении и письме, включающая способы создания убедительных аргументов.Взлабал много тестов. Купил сумку для ноута. Погладил кота. А еще две вещи едут ко мне из москвы, буду делать ставки - какая прибудет первой.

Наступил какой-то деньрожденческий переполох. Много, очень много людей. Эта статистика как бы говорит нам из прошлого, что на новый год есть все шансы, да.


Слово Канеру:

Тестирование основано на когнитивной психологии.


Теория познания говорит нам о том, как мы должны думать, когнитивная психология говорит о том, как мы думаем. Некоторые ее темы, релевантные тестированию:

- Надежность твоих чувств и памяти.
- Откуда исходит вера.
- Как вера влияет на поведение.
- Предубеждения и короткие пути, которые ты используешь для принятия решений.
- Как ты учишься и делишься тем, что знаешь.
- Что ты думаешь о комплексном мышлении.
- Как ты мыслишь под давлением.
- Как ты признаешь шаблоны.
- Как ты сортируешь идеи и мыслишь категориями.
- Как ты замечаешь разницу между вещами.
- Искажения событий в памяти.
- Как ты частично восстанавливаешь события из памяти(например невоспроизводимые баги).

Многие люди, не изучавшие этот предмет, хорошо тестируют. Если ты хочешь делать лучше, чем хорошо, изучение когнитивной психологии поможет тебе понять факторы, влияющие на твою эффективность, как тестировщика, а также факторы, влияющие на то, как люди понимают твою работу.

Чтоб начать изучать, смотрите не далее, чем Cognition in the Wild (Hutchins 1995). Hutchins изучал команды военно-морской навигации и то, как они работают сейчас. Многое в этой книге применимо и к проектам программного обеспечения и командам тестирования. Полезная книга о психологии мышления "Теория доказательств: Научные исследования" (Koslowski 1996). В этой книге Koslowski исследует, как люди применяют теорию причин к рассуждениям о системах. Это объясняет, как тестировать больше, чем просто наблюдая внешнее поведение и проверяя не только простые ожидаемые результаты.Взлабал почти столько же тестов, сколко и вчера. Подгоны из мск не приехали, хотя очень, очень надеялся.

А еще сегодня день программистов, с чем я их и поздраваляю. И немного поздравляю себя, меня тут недавно назвали личинкой программиста.

Альбом: randompics4lj


Слово Канеру:

Тестирование в твоей голове.


Разница между великолепным и средним тестированием в том, как ты думаешь: твой выбор тест-дизайна, способность понимать то, что ты наблюдаешь, способность убедительно рассказать об этом. Остальное тестирование - обыденная офисная работа, по большей части. Если посмотреть, как два тестировщика работают бок о бок, ты не обязательно скажешь, что один тестирует лучше, чем другой. Видимая часть их работы выглядит одинаково и имеет два значения:

- Многие люди считают тестирование простым, так как они могут просто скопировать видимую часть работы хорошего тестировщика, и они не имеют никакого другого стандарта или представления о хорошем тестировании.

- Если ты хочешь стать хорошим тестировщиком изучай то, как он думает, а не то, как он выглядит.Сегодня закончил группу тестов. А еще внезапно оказался руководителем практики, которая проходила в июле у нас в отделе.

Кстати, несправедливость, почему аналитикам на практику дали большеглазых девочек, а у нас гик да очкарик (Алексей и Сергей, без обид =) )?

Кстати, к качестве рекламы нашей конторы, три из шести практикантов уже работают у нас.

Слово Канеру:

Тестирование требует делать выводы, а не только сравнивать ожидаемый и полученный результат.


Популярное мнение, что тестировщики просто выполняют тестовые сценарии и сравнивают то, что случилось с ожидаемыми результатами. Из за этого мнения тестирование кажется простым сравнением и игнорирует тот факт, что есть некие умные люди, которые создают дизайн тестов и определяют ожидаемый результат. Угадайте кто? Тест-дизайнер почти никогда не имеет доступа к авторитетным руководствам по тому, что должно быть протестировано, не говоря уже о том, что ожидать. А руководства еще нужно правильно понять. В реальной жизни большая часть тест-дизайна основана на выводах или взято из опыта, который тестировщик считает применимым. Больше того, эти выводы меняются со временем. Чтоб думать как тестировщик нужно быть адептом искусства исследовательских предположений.

Исследовательские предположения могут звучать как странные идеи. Это означает, что одна идея ведет другую, и нельзя предсказать, к чему приведет следующая. Хорошим вступлением к исследовательским заключениям может быть "Proofs and Refutations: The Logic of Mathematical Discovery" (Lakatos 1976). Больше всего об этой книге скажет то, что Lakatos показал процесс математического и научного рассуждения основанного на исследовании, а не сценарии. Даже математические рассуждения активны, а не скучное применение формул. Они думали как тестировщики.Слово Канеру:

Хорошие тестировщики думают технически, творчески, критически и практически.



Все виды мышления фигурируют в практике тестирования. Но мы верим, что на четыре основных категории стоит обратить внимание:

- Техническое мышление. Способность технического моделирования и понимания причин, воздействий. Это включает такие вещи как знание относящихся к делу технических фактов, способность использовать инструменты, предсказывать поведение системы.

- Творческое мышление. Способность генерировать идеи и видеть возможности. Вы тестируете только теми способами, которые в состоянии представить. Вы сможете увидеть только те проблемы, существование которых сможете представить.

- Критическое мышление. Способность оценивать идеи и делать выводы. Это включает способность находить и ликвидировать ошибки собственного мышления, связывающие наблюдения за продуктом с критериями качества, создавать убедительные сценарии и паны действий.

- Практическое мышление. Способность воплощать идеи в жизнь. Эта способность включает такие навыки, как применение инструментов тестирования и тестовых техник, вписывающихся в рамки проекта.

В целом, мысля как тест лид, вы поверите, что вещи могут быть не такими, какими кажутся. Однако, вещи могут быть разными. Мы считаем, что когда процесс тестирования ломается по самому разрушительному пути, причины скорее всего в "туннельном" зрении. Другими словами, это не значит, что мы запустили 10 000 тестов и должны запустить 10 001-й тест. Это значит, что у нас сломалось представление о целой категории тестирования; мы могли бы не выполнить задачу, даже если бы имели в два раза больше времени и ресурсов.Купил сумку для ноута. Вот:
Альбом: home

Ну и еще скоро наудевелкамп же! Хорошо.

Слово Канеру:

Тестирование черного ящика не является тестированием, основанным на невежестве


Тестирование черного ящика означает, что знания о внутреннем содержании продукта не играют важную роль в тестировании. Многие тестировщики тестируют методом черного ящика. Чтоб тестировать этим методом хорошо, изучите пользователя, его ожидания и нужды, технологию, конфигурацию тестируемой программы, других программ, с которыми она взаимодействует, изучите данными, которыми управляет ПО, процесс разработки и т.д.. Преимущество тестирования черного ящика в том, что ты, вероятно, будешь мыслить не так, как программист, таким образом, возможно, снизится риск того, что программист что-то пропустил.

Тестирование черного ящика акцентирует внимание на изучении пользователя и окружения ПО, что не каждому про душе. Мы слышали описание такого тестирования как «тестирования, основанного на невежестве», так как тестировщик остается не знаком с лежащим в основе кодом. Мы считаем, что это отражает фундаментальное недоразумение, недопонимание роли группы тестирования. Мы не возражаем, чтоб тестировщик изучал то, как работает продукт. Чем больше вы знаете о продукте, чем больше имеете путей познания, тем лучше вы готовы к тестированию. Но если ваше основное внимание приковано к исходному коду и тестам, которые вы по нему можете создать, то вы будете покрывать то, что программист, вероятно, уже покрыл тестами, имея меньшие, чем он, знания о коде.Слово Канеру:

Тестировщик это больше чем турист.

Многое, из того, что вы делаете с продуктов, кроме тестирования, может помочь вам изучить его. Вы могли бы пройти экскурсию по продукту, посмотреть, как он изготовлен и как он работает. Это неоценимо, но это не совсем тестирование. Разница между тестировщиков и туристом в том, что усилия тестировщика направлены на оценку продукта. А не только на его осмотр. Хотя и нет необходимости в том, чтоб предсказывать, как ПО будет себя вести, выполнение с продуктом каких-либо действий не станет тестированием до тех пор, пока вы не примените принципы и процессы, позволяющие диагностировать проблемы, если таковые существуют.А сегодня как-то так.
Раз:
Альбом: 20 сентября 2011 г.

и два:
Альбом: 20 сентября 2011 г.


Разница во времени между фото — пара часов.

Слово Канеру:

Все тесты являются попытками ответить на какой-либо вопрос.

Все тесты — это эксперименты, выполняемые для ответа на вопрос о зависимости между тем, чем продукт является и тем, чем продукт должен быть. Иногда вы не полностью понимаете вопросы, которые задаете. Это может быть хорошо, если вы видите очевидную проблему. Однако, во многих случаях, баги не прыгают на вас с мигающей неоновой табличкой «Зарепорть меня». Продукт может плохо себя вести в ситуациях, которые пользователь сочтет очевидными, а ты (тестировщик), можешь и не заметить. Тестируя, спросите себя, какой вопрос должен управлять вашей стратегией тестирования. В противном случае, вы скорее турист, чем тестировщик.Слово Канеру:

Все тесты основаны на моделях.

Ты можешь иметь воображаемую картину дизайна тестов в своем разуме. Или ты можешь работать со списком фич, или с какими-нибудь диаграммами. Ты имеешь некоторое представление о том, кто твои пользователи и что их беспокоит. Все это модели. Ни смотря ни на что, твои тесты в первую очередь на твоих моделях продукта, но не на самом продукте. Недостатки результатов использования модели — в недостатках тестов. Изучение новых способов моделирования продукта — изучение новых способов взглянуть на него.

Изучай моделирование. Ты будешь тестировать все лучше по мере получения новых навыков моделирования. Учебники и тренинги по анализу требований и архитектуре ПО могут помочь тебе. Прекрасный путь улучшения навыков всех видов моделирования — изучение систем мышления. Смотри An Introduction to General Systems Thinking: Silver Anniversary Edition. (Weinberg 2001).Слово Канеру:

Интуиция хороша для начала, но паршива в финале.

Вы можете быть искушены в использовании отдельных тестовых данных или судить конкретные тестовые случаи, основываясь на вашей интуиции - «чуять нутром», даже если вы не можете ясно объяснить причины вашего знания. Мы считаем, что это полезное чувство, но оно полезно скорее в качестве точки старта, чем в качестве точки отдыха.

Кроме того факта, что интуиция часто глубоко субъективна, реальные проблемы появляются, когда вы пытаетесь передать ваш баг репорт и оценки качества другим людям — программисту, менеджеру. За исключением случаев, когда предположение разделяют и остальные — оно должно быть отклонено.

Поэтому мы рекомендуем использовать интуицию как ориентир, но не как обоснование. Если вы склонны думать «это баг потому что это очевидно баг», замените это суждение на «это баг, так как я наблюдал поведение продукта, нарушающее требования X, Y и Z, а эти требования важны для моих клиентов».Сегодня перестал болеть простудой, и, внезапно, сменил адрес проживания. На пару километров южнее, о как.

Слово Канеру:

Чтоб тестировать ты должен исследовать.

Чтобы протестировать что-либо хорошо, ты должен работать с этим. Ты должен погрузиться в предмет. Это исследование даже в случае, когда у тебя есть хорошее описание продукта.
Пока ты изучаешь спецификации, умозрительно или работая с продуктом, тесты, которые ты создашь будут поверхностными. Только после того, как ты достаточно глубоко изучишь продукт, останется еще вопрос исследования проблем продукта. Поскольку тестирование это эксперимент, а ваш эксперимент может быть никогда не завершен, исследовательское мышление играет роль на протяжении всего проекта, если вы стремитесь к высокому качеству системы.
Под исследованием мы подразумеваем целенаправленное блуждание: движение через пространство с определенной целью, но без определенного маршрута. Изучение включает в себя изучение и экспериментирование. Это много откатов, повторов, и других процессов, которые могут выглядеть как мусор для нетренированного глаза. Возможно, по этой причине, важность исследования для тестирования и для производства ПО часто приуменьшается и даже высмеивается писателями и консультантами в нашей области.

Доказательство важности исследований выходит за рамки этой книги. Один из способов получения подобного опыта — попробовать собрать пазл, не заглядывая в картинку на коробке, или сыграть в игру «12 вопросов». Заметьте, как сложно было добиться успеха и насколько менее полезным было бы следовать в этих случаях заранее составленному шаблону.

Чтоб узнать, как обучение исследованию используется в других областях, подобных тестированию, посмотрите The Discovery of Grounded Theory: Strategies for Qualitative Research (Glaser and Strauss 1999), и Basics of Qualitative Research, 2nd Edition (Strauss, Anselm, and Corbin 1998). Если вам нравится статистика, то попробуйте Exploratory Data Analysis (Tukey 1977).Ну и я не пройду мимо тренда блогосферы.
Путин, Медведев, Кудрин, ужас пыщ, пыщ!

О интересном. Недавно купленый asus tf101 я последний раз полностью зарядил в субботу, в 15:30. По вечерам на нем пару часов смотрю фильмы, читаю книжки. Сегодня вечер вторника, осталось примерно четверть заряда. Убермашина!

Ну да, еще скоро допишу хороший годный тест. Кстати, нас - автоматических тестировщиков - хотят отселить в кабинет с большим окном.

В целом ОК.

Слово Канеру:

Исследование включает в себя много способов мышления.

Исследование — детективная работа. Это бесконечный поиск. Думайте исследовании как о движении в космосе. Оно включает в себя прямое, обратное и нестандартное мышление.
Прямое мышление. Работайте от того, что вы знаете к тому, что вы не знаете. Двигайтесь от того, что вы видели к тому, что вы еще не видели. Ищите последствия и побочные эффекты. Пример: Я вижу пункт меню «Печать». Я кликаю по нему, чтоб узнать, что случится.
Обратное мышление. Двигайтесь от того, что вы ожидаете или представляете к тому, что что вы знаете, пытаясь подтвердить или опровергнуть ваши гипотезы. Пример: Интересно, есть ли возможность напечатать этот документ? Я посмотрю в меню и узнаю, есть ли там пункт печати документа.
Нестандартное мышление: Позвольте себе отвлекаться на идеи, которые приходят в голову. Изучите, как они касаются основного направления движения. Пример: это интересный график. Эй, я напечатаю несколько сложных графиков и посмотрю, что случится.

Процесс исследования работает даже если у вас нет продукта для тестирования. Вы можете исследовать документацию или провести интервью с программистами, используя тот же способ мышления. Вы идете вперед за счет создания более богатых, полных ментальных моделей продукта. Эти модели позволят вам создавать более эффективные тесты.А у нас в офис привезли тестовые амазонкиндлы.

Альбом: office


Я уже себе хочу такой, он замечательный. Только я пока не понимаю, зачем он мне нужен, у меня есть с чего читать.

К сегодняшнему переводу — слово «абдукция» - реально существует.

Слово Канеру:

Используй абдуктивное мышление, чтоб найти гипотезы.

Абдуктивное мышление, также известное как гипотетическая индукция, это причудливое название для важных форм размышлений, которые тестировщики используют каждый день: рассужlения для поиска лучшего объяснения. Оно звучит как:

1. Ты собрал некую информацию и хочешь найти ее смысл.
2. Ты строишь различные предположения, которые могут объяснить эту информацию.
3. Ты нашел больше информации, которая поможет тебе подтвердить или опровергнуть некоторые предположения.
4. Ты выбрал из всех вариантов самое понятное предположение, которое объясняет всю важную информацию, или, если всего этого не хватает, чтоб подтвердить выводы, продолжаешь поиск.

Абдуктивное мышление это базовый метод для науки тестирования. Доктора используют его, чтоб диагностировать болезни. Тестировщики используют его, когда делают предположения о том, чем является продукт и о том, как он должен и не должен работать. Если ты хочешь лучше мыслить абдуктивно:
- Собери больше информации
- Собери больше важной информации
- Собери больше достоверной информации
- Пойми причины и следствия, применимые к этой информации
- Идентифицируй больше хороших гипотез, которые объяснят информацию
- Собери больше информации которая сможет опровергнуть каждое предположение
- Собери больше информации, которая сможет разграничить гипотезы
- Не останавливайся на гипотезе пока она не будет объяснять всю важную информацию и не будет подтверждена информацией, собранной позднее.

Абдукция это системный метод для поиска хороших гипотез. Хотя абдуктивное мышление не предоставляет полную определенность, это лучшая техника, которую мы можем себе позволить в данной ситуации.Мне протянули интернеты.

Посылаю лучи ненависти техподдержке провайдера Кабинет. Мало того, что у них на сайте не указана почта - телефон они тоже игнорируют.

Обратно же, посылаю лучи благодарности монтажникам Кабинета, которые пришли в оговоренное время и решили вопрос в кратчайшие сроки, при этом не спросив попользоваться туалетом (привет, конвексы и голдам, хех).

Слово Канеру:

Используй логику гипотезы и опровержения для оценки продукта

Философ Карл Поппер ввел метод гипотезы и опровержения в начале XX века, когда работал над проблемой различий религии и науки. Метод основан на предположении, что ученый не может быть абсолютно уверен относительно какого-либо факта или теории о природе. Все существующее — гипотезы. Некоторые гипотезы, такие как существование гравитации, очень сильны. Гипотезой, а не фактом их делает то, что можно представить себе новую информацию. Которая, если бы она существовала, заставила бы нас отказаться от гипотезы. Поппер заметил, что хотя мы и не можем доказать, что гипотеза верна, но мы можем доказать, что она ложна. Поэтому он предложил, что уверенность в данной гипотезе будет следовать из постоянных безуспешных попыток опровергнуть ее.

Этот метод создания гипотез и попыток опровергнуть их применим в тестировании по трем важным направлениям:

- Это более мощный способ показать, что продукт сломан, нежели, для того, чтоб показать, что продукт работает. Когда ты хочешь показать, что продукт работает — ищи способы опровергнуть предположение, что продукт работает, и, возможно, ты будешь тестировать лучше.
- Хорошо сформированные представления о ПО (как он себя ведет, насколько хорош, и так далее) должны быть сфальсифицированы. Это значит, что мы должны быть готовы представить новую информацию о продукте, которая бы противоречила нашим представлениям о нем. В противном случае наше представление не больше чем вера. Вера хороша в частной жизни, но она яд для тестирования.


Кстати, френды, помогите перевести последние два предложения. Что-то я не могу уловить суть.

- Beware of tests that purport to validate or certify a product in a way that goes beyond the specific tests you ran. No amount of testing provides certainty about the quality of the product.

Заранее спасибо.

лекции, bret pettichord, lessons learned in software testing, james bach, chapter 2, cem kaner, жизньФренды планируют очередную социопати с песнями под гитару. Вот бы хоть одним глазком на такое посмотреть.

Добрые врачи вкололи грипп в руку и только потом сказали, что алкоголь нельзя.

Кстати, у Канера всего 293 урока. Я перевел 31. Как вы думаете, на сколько меня хватит?

Слово Канеру:

Требование качества или некоего условия имеет значение для тех, кто принимает решение.


Ты можешь выбирать из многих условий или требований. Это определение хорошо работает для тестировщиков. Как тестировщик ты должен знать, чье мнение о качестве является определяющим. Узнайте, чего они хотят и чего не хотят. Этот взгляд на требования уберет различия между разработкой ПО «по требованиям»(набор положений, определенный в списке требований и утвержденный людьми, имеющими на это право) и по другим видам спецификаций. Для целей тестирования в требовании должны быть описаны все состояния или качества, которыми должен обладать продукт.
Разные клиенты хотят разных вещей от продукта, они даже не обязательно знают, чего они хотят, и чего будут хотеть через некоторое время. Это делает нашу работу более интересной. Добро пожаловать в тестирование.Дорогое мироздание. Сегодня весь день я вручаю разным людям ништяки.

Я вручил кота.
Я вручил кружку.
Я вручу колонки.

Дорогое мироздание. Я хочу пива. Гиннес, желательно.
Примерно так:
Альбом: home


Ну или так:
Альбом: home


Ну хотя бы так:
Альбом: home


Слово Канеру:

Вы получите требования совещаясь, делая выводы и проверяя ссылки.


Если вы ожидаете получить требования на пучке пергамента, проштампованном печатью вселенской правды, найдите другую работу. В лучшем случае, который с нами происходил, требования (которые включали все возможные виды спецификаций, вариантов использования, видений документов и так далее) были неполными и противоречивыми, хотя и были полезными и информативными. В худшем случае, который мы наблюдали, документация была неполной, двусмысленной, неинформативной и бесполезной.

Тестировщик, который использует проектную документацию (спецификации продукта) в качестве единственного источника требований калечит весь процесс тестирования. В любой команде тестирования, которой мы управляли, подобное поведение было бы преступлением.

Информация о требованиях поступает по трем основным путям:
Совещания. Общение с кем-любо, чье мнение о качестве продукта является решающим и изучение того, что является важным для него.
Выводы. Определите важные требования путем экстрапроляции от других вещей, которые вы знаете о проекте или продукте.
Ссылки. Откройте для себя явные и неявные спецификации и основывайтесь на них.

Во многих проектах большинство требований, которые использовали хорошие тестировщики были получены из совещаний, выводов и неявных спецификаций. Это твоя работа — выискивать информацию, необходимую для тестирования.

Отличная книга об этом: Exploring Requirements: Quality Before Design (Gause and Weinberg 1989).Сегодня вджобывал.
PMD помогло выяснить, что система тестирования старого проекта является тонко сбалансированной конструкцией из костылей.

До меня ме-е-едленно, но верно - самым эффективным способом, через личный негативный опыт - начинают доходить причины того, почему нач так сильно докапывался до требований и кода новой тестирующей системы. Он докапываться уже более менее перестал, но теперь я чувствую, что я должен занять его место.

Слово Канеру:

Используй подразумеваемые, скрытые спецификации точно так же как явные.


Не все ссылки, содержащие важную информацию для ваших тестов, могут быть явно представлены вам:
- Явная спецификация является полезным источником информации о требованиях, авторитет которого признан клиентами («Да, это спецификация. Это описание продукта»).
- Неявная спецификация является полезным источником информации о требованиях, авторитет которого не признан клиентами («Это не спецификация, но это имеет смысл»).

Авторитет неявной спецификации появляется из убедительности и достоверности содержащихся в ней сведений, а не волей клиентов. В большинстве случаев только часть неявной спецификации относится к продукту. Неявные спецификации могут принимать разные формы:
- Готовые продукты
- Релевантные продукты
- Старые версии продукта
- Дискуссии о продукте в почте
- Комментарии разработчиков
- Журнальные статьи (например обзор старых версий продукта)
- Книги по релевантным предметам (книга по учету может относиться к приложению по учету)
- Руководства по созданию пользовательского интерфейса
- Требования операционных систем
- Ваш личный основанный на фактах опыт

Когда продукт нарушает явные спецификации, вы получаете простую, легкозарепорчиваемую таску: «Продукт нарушает спецификацию, продукт, вероятно, сломан». Когда нарушена неявная спецификация, вам придется потрудиться больше: «В Microsoft Office, F4 забиндена на повторение команды. Если мы не будем делать так же, то мы можем запутать наших пользователей, они используют Office для повседневной работы.» И хотя никто не сказал бы, что MS Office это спецификация для вашего продукта, ваши клиенты могут согласиться, что выравнивание пользовательского интерфейса по нему может улучшить юзабилити продукта. В таком случае Office становится неявной спецификацией вашего продукта.

Некоторые тестировщики задаются вопросом, почему проектировщики не вставят все полезное в явные спецификации и им приходится пользоваться неявными. Ответ простой: хотя это было бы удобно для тестировщиков, это дорого и ненужно. Наши клиенты доверяют нам использование любых ссылок, которые потребуются или будут важными для решения проблем в нашей работе.Сегодня учил тест врать-врать, да не завираться.
А еще учил этот же тест не тащить ничего с панели управления
Вроде как научил, но он все равно нет-нет, да добавит какую-нибудь ссылку в избранное.

Да, чуть не забыл! Мне дали на недельку офисный киндл погоняццо. Буду лабать обзор же! Ну киндла и книжки, что я с него прочту. Если я вас не обману, это будут Пратчетт, Демарко ну и Дастин, например.

Слово Канеру:

«Это работает» на самом деле означает, что некоторые требования в определенной степени удовлетворены.


Иногда вы слышите как кто-нибудь говорит: «я проверил, это работает», «я уверен, это работает», или «сейчас это работает лучше». Мы рекомендуем переводить «это работает» как «некоторые требования в определенной степени удовлетворены». Вопросы, которые должны немедленно появиться у вас:

Что «это»? О какой части продукта мы говорим?
В каком виде? Что именно наблюдалось?
Какие требования были проверены? Корректность? Производительность?
В той ли степени выполнены требования, чтоб пройти тест? Это работает только нормально или в высшей степени отлично?
Когда это работает? В каких обстоятельствах продукт был покрыт тестами? Насколько эти обстоятельства можно безопасно обобщать?

Вам не придется задавать эти вопросы вслух, если вы этого не хотите. Дело в том, что фраза «это работает» бессмысленна без дальнейшей квалификации. И когда вы думаете «это работает» - это тоже может соответствовать чьим-то определениям.Сегодня отучал fuzz тест совершать ритуальное самоубийство путем удаления прав у сотрудника, под которым он ходит. И приучал его внятно, по-русски, рассказывать о найденных багах в частности и о ходе процесса в целом.

Слово Канеру:

В конце концов, все, что у вас есть, это представление о продукте.


Все что вы знаете о качестве продукта — предположения. Независимо от того, чем оно подтверждено, вы не можете быть до конца уверены в своей правоте. Поэтому каждый раз, когда вы докладываете о качестве продукта, вы должны осознавать, что содержание доклада определено тестированием, и понимать ограничения вашего процесса тестирования.Переехали в комнату с большими окнами и впятеро меньшим количеством народу.
Тут тихо и работоспособно.

Слово Канеру:

Не путайте тесты и тестирование


Что значит создать тест? Это может означать, что тестировщик провел сессию исследовательского тестирования с результатом в виде эфемерных тестов без какой либо документации. Это может означать, что тестировщик создал набор исполняемых программ или набор подробных процедур испытаний. Это может быть ссылка на высокоуровневую матрицу тестирования, тест-план или набор тестовых данных.

Концепция, по которой тест становится самодостаточным, осязаемым, и независимым от других тестов удобна (мы будем ее придерживаться при написании этой книги), но очень ограничена. Это то, что важно в тестировании, а не то, как вы делите тесты на пакеты или как называете тесты.

Тестирование это то, что связано со следующими четырьмя активностями:
- Конфигурирование. Подготовьте продукт к тестам. Создайте начальное состояние. В противном случае результаты тестов могут быть испорчены меняющимися параметрами.
- Оперирование. Поток данных о продукте. Подавайте команды. Взаимодействуйте с ним. В противном случае, вы просто сидите и наблюдаете, а не тестируете.
- Наблюдение. Собирайте информацию о том, как продукт ведет себя, о выходной информации, о состоянии системы в целом, о взаимодействии с другими продуктами и так далее. Вы не можете наблюдать за всем, но все, за чем вы не наблюдаете, может привести к ошибке.
- Оценка. Применяйте правила, выводы, механизмы которые обнаружат баги в том, что вы наблюдаете. В противном случае в вашем докладе не будет проблем, или вы будете просто передавать данные клиентам, которые должны будут выполнить оценку самостоятельно.

Созидание имеет много форм. Не стоит зацикливаться на форме, просто убедитесь, что эти четыре активности присутствуют. Сосредоточитесь на том, кто их выполняет и на том, насколько хорошо тесты соответствуют миссии и цели тестирования.Слово Канеру

При тестировании сложного продукта: погружайтесь и выходите

Иногда сложность бывает огромной. Вы можете почувствовать себя интеллектуально парализованным. Поэтому тестируйте сложные наборы функций набегами. Ваш ум обладает удивительной способностью понимать сложные вещи, но не ждите. Что он поймет все и сразу. Набросьтесь на продукт в течении 30-60 минут. Затем остановитесь и займитесь чем-нибудь другим. Это метод погружения и выхода. Не беспокойтесь о непродуктивности этого короткого промежутка времени.

Самое замечательное в этом методе то, что он не требует плана, кроме выделения части продукта и работы с ней. После нескольких циклов вы представите себе модель и контуры продукта. Более организованная стратегия тестирования и изучения придет вам в голову. Это работает как по волшебству. В конце-концов вы будете знать достаточно, чтоб создать комплексный план тестирования, который поможет вам.Слово Канеру

Используйте эвристику для быстрой генерации идей тестирования.

Эвристика это правила мышления, способы делать обоснованные предположения. Это слово произошло от греков, означает «служащее для обнаружения». Эвристика не гарантирует правильного ответа, но тем не меняя, она полезна. Основополагающая книга по эвристике: How to Solve It (Polya 1957).

Так как число возможных тестов бесконечно, мы сделаем предположение о том, что небольшая группа тестов будет эффективна при наших ограничениях времени и бюджета. Опытные тестировщики собирают и обмениваются эвристическими методами, улучшающими качество их предположений. Хороший набор эвристик позволяет создавать тесты очень быстро. Вот некоторые примеры:

- Тестируйте границы. Наиболее вероятно именно они невнятно описаны в спецификациях.
- Проверяйте сообщения об ошибке. Код обработки ошибок, как правило, хуже кода основной функциональности.
- Тестируйте на конфигурациях, которые отличаются от конфигураций программистов. Свою конфигурацию программист уже проверил.
- Выполняйте тесты на сложной, раздражающей настройке. Тесты с простой настройкой, скорее всего, уже проводились.
- Избегайте избыточных тестов. Если один тест повторяет другой, то что вам это даст?

Чтоб правильно использовать эвристику нужно знать: в ней нет мудрости. Мудрость в вас. Все, что делает эвристика — дает вам гипотезы. Слепо следуя эвристикам вы не придете к хорошим практикам тестирования. Когда вы их собираете, попытайтесь понять и обосновать все условия, при которых они работают.Тестероконференция ок, но народ идет неохотно, ссылаются на заняты и поздно.

На доклады по автоматизации не идут:
Автоматические тестировщики - говорят, что все это уже знают,
Ручные утверждают, что ничего не понимают.

Расстрелял бы.
Слово Канеру:

Ты не можешь избежать предубеждения, но ты можешь управлять им.


Вы необъективны. Это заставляет вас с большей вероятностью выбирать одни, а не другие тесты. Если есть длинное поле для редактирования, то скорее вы введете в него что-то вроде 1111111111, нежели 3287504619, так как легче ввести строку из повторяющихся символов, чем из случайных. Это небольшое отклонение, но все-таки отклонение. Более зловещим является тот факт, что большинство тестеров склоняются в пользу тестирования более очевидных функций, которые могут и не быть важными. Также, многие тестировщики склоняются к пользователям, которые думают как они и склонны выполнять тесты с простыми и искаженными входными данными, в отличии от реалистичных входных данных умеренной сложности.

Несколько популярных предубеждений:

Ассимиляция. Мне больше нравится создавать тесты так, чтоб интерпретировать их будущие результаты так, чтоб они подтверждали мое мнение о продукте.
Подтверждение. Мне больше нравится обращать внимание на те результаты тестов, которые подтверждают мое мнение о продукте.
Доступность. Если я легко могу придумать сценарий, в котором пользователь ведет себя определенным образом, то я буду считать, что этот сценарий описывает наиболее вероятное поведение пользователя.
Первенство. Я буду больше доверять мнению, составленному во время первого наблюдения.
Новизна. Я буду больше доверять мнению, составленному во время недавнего наблюдения.
Эффект рамки. Моя реакция на отчет об ошибке сильно зависит от формулировки и независима от того, что отчет значит.
Известность. Я буду придавать больший вес пользователям с которыми я знаком.
Репрезентативность. Я ожидаю, что у маленьких проблем небольшие причины, в то время как большие проблемы требуют больших причин.

Вы не можете избежать этих предубеждений. Они по большей части, зашиты в наш мозг. То что вы можете сделать — управлять ими. Например — путем изучения предубеждений и практикуя их осознание, вы будете более оснащенным для того, чтоб компенсировать их в вашем мышлении. Разнообразие тоже является защитой от большого предубеждения. Если много тестировщиков бренстормят тесты вместе, они могут минимизировать влияние многих тестировщицких предубеждений. По определению эвристика — это тоже предубеждение. Мы используем эвристику так как надеемся, что это предубеждение будет полезным.Слово Канеру:

Вас труднее обмануть, если вы знаете, что вы дурак.


Мошенники говорят, что легче всего обмануть тех, кто убежден, что его невозможно обмануть. Вы можете применить этот принцип в своей работе тестировщика. Убедите себя в том, что вы дурак. Это несложно, просто осторожно наблюдайте за своими ошибками во время тестирования. Записывайте каждый раз, когда другой тестировщик обнаружил проблему там, где вы могли бы ее обнаружить, но не сделали этого.

Если вы знаете, что вас легко обмануть, то вы становитесь немного более внимательным. Вы и ваш ум сильнее и подробнее работают с деталями стратегии тестирования. Это один из самых быстрых путей совершенствования начинающего тестировщика, так как сознание того, что вы дурак — это отношение, а не навык или знание. Проблема начинающих тестировщиков в том, что для них этот принцип — просто вера («Мне сказали, что я должен думать, что меня можно обмануть...»); в то время как чувства и рефлексы опытных тестировщиков были разбужены и обострены болью от постоянного накручивания («Я помню большой возврат 94-го. Мы не могли представить себе, что вирус может заразить наш золотой мастер-диск. Я потерял свою невинность в тот день.»)Слово Канеру:

Если вы пропустили ошибку — проверьте, была ли это случайность или естественный результат вашей стратегии тестирования.


Если вы подбрасываете монету и загадываете решку, но продолжает появляться орел, не значит ли это, что вы приняли неверное решение? Независимо от какого-либо рационального стандарта. Если это не фокус, то у нас есть 50% шанс на выпадение решки и выпадение орла будет просто невезением, а не чем-либо удивительным.

Этот же вопрос стоит задать, когда вы не находите баги в процессе тестирования и это создает проблемы вашим клиентам. Не бейте себя по голове, пока не проверите, что случилось со стратегией тестирования. Случилось бы это, если бы вы следовали верной стратегии тестирования? Если это случайность — следуйте прежним курсом. Но, если вы пропустили баг из-за того, что ваша стратегия тестирования сфокусирована на других типах проблем, используйте эту возможность, чтоб изменить ее.Рисовали мы тут диаграммы - кто как работает, что на входе, какой продукт на выходе и так далее. Для всех. Чтоб выяснить, на каких печеньках сэкономить и вообще понять, что происходит.

Примерно так выглядит небольшая часть диаграммы работ у программистов:
Альбом: office


Оно же ИРЛ:
Альбом: office


А вот так - у автотестеров:
Альбом: office


Оно же ИРЛ:
Альбом: office


Как то так.

Слово Канеру:

Путаница это инструмент тестировщика.

Если вы чувствуете, что запутались, знайте, это может говорить вам о чем-то важном.
Это путаница в спецификациях? Неясности в спецификациях часто появляются чтоб скрыть важные разногласия среди влиятельных заинтересованных сторон.
Это путаница в продукте? Он может быть сломан.
Это путаница в пользовательской документации?Эта часть продукта может быть очень сложной. Слишком много разных сценариев использования и несоответствий между ними, чтоб описать их.
Лежащая в основе проблема трудна для понимания? Некоторые системы, которые мы пытаемся автоматизировать, по своей сути сложны или включают в себя различные технические вопросы. Программисты тоже находят их сложными и это приводит к ошибкам, упущениям, непониманию, переупрощению.

Чем больше ты знаешь о продукте, технологиях и тестировании вообще, тем лучший компас у тебя появится, который покажет тебе, где лежат важные проблемы.

В тестировании, если ты ничего не знаешь о продукте, то ты хотя бы понимаешь, что запутался. В этой ситуации путаница, в форме вопросов о проблеме, которые никто не имел смелости поднять, может быть лучшим результатомПримерно с 2.9 релиза selenium начал нормально отрабатывать MoveTargetOutOfBoundsException — это когда нельзя пецкнуть элемент, находящийся вне рабочей области браузера. Cегодня обновил pom.xml и на тебе: наш «боевой фазер» находит четверть сотни такой хрени — и это на чистой базе.

Стоит похвалить и ручных тестировщиков — они об этом уже знали и повесили тикет в виде темно-розового сердечка(светло розовые сердечки менее приоритетны).

Ну а я что? Я прям обрадовался и решил, что мое существование в проекте становится близким к смыслу.

Сказал мол — даешь новые типы тестов в массы. Даешь автоматические тесты на права как в фейсбуке. А мне, как водится, тут же объяснили, что все это уже продумано без меня, запланировано до нас и вообще вчера обсуждалось с Наташей Р..

Велосипед изобрели до меня. Это печально.
Альбом: randompics4lj


Слово Канеру:

Свежий взгляд найдет багу.

Понять смысл чего-либо это сложный интеллектуальный процесс преобразования новой информации в то, что вы уже знаете, изменяя при этом то, что вы уже знаете, для размещения новой информации. После того, как вы поняли смысл продукта или фичи вы имеете их ментальную карту и вашему мозгу становится легче с этим работать. Это может быть проблемой для тестировщиков. Если вы хорошо знаете продукт, то вы делаете много допущений о нем и вы не так часто проверяете эти допущения.

Эта ситуация имеет по крайней мере три последствия для тестирования:
- Когда вы получаете продукт или фичу, уделите особое внимание тому, что смущает или раздражает вас. Это может говорить о том, какой окажется реакция пользователей на продукт.
- Если у вас в команде новички — работайте вместе с ними. Наблюдайте за их реакцией на продукт и на то, как они изучают его.
- Остерегайтесь попадания тестирования в колею. Даже если вы не следуете жестким сценариям тестирования, вы можете быть так хорошо знакомы с особенностями продукта, что вы будете тестировать все более сужающиеся части продукта. Внесите изменения там где вы можете или обменяйтесь обязанностями с другим тестировщиком.Сегодня ничего не понимаю.
Альбом: randompics4lj


Слово Канеру:

Избегай следования процедурам если они не следуют за тобой.

Остерегайся процедур других людей. Они обычно заключаются в сценариях тестирования и процедурах, сформулированных таким образом, что они ничего не говорят о целях, лежащих в основе стратегии тестирования. Это создает большую вероятность того, что ты будешь следовать тестам без полного понимания того, что они делают и на что нужно обращать внимание. Другими словами, вы на самом деле не будете следовать им. В целом, тестовые процедуры плохо описаны и плохо спроектированы так как несколько хороших тестировщиков попытались запрограммировать людей как компьютеры. Если вы хотите следовать процедурам тестирования, то предпочитайте те, что вы спроектировали сами, те что вам принадлежат или те, которые вы тщательно изучили.

Для достижения наилучших результатов вы должны контролировать ваше тестирование, а не вашу документацию. Заставьте ее следовать за вами.

Если вы убеждены, что процедуры тестирования хорошая вещь, по крайней мере изучите, как они работают. Посмотри Things that Make Us Smart: Defending Human Attributes in the Age of the Machine (Norman 1993) и The Social Life of Information (Brown and Duguid 2000).Слово Канеру:

Если вы создаете процедуры тестирования, опасайтесь «1287.»


Один из нас, Бах, однажды был свидетелем того, как тестировщик писал процедуру тестирования, которая включала в себя строку «Введите 1287 символов в поле». Откуда взялись 1287? Тестировщик объяснил это тем, что по его идее нужно ввести в маленькое поле ввода очень большой набор символов. И, поскольку он слышал, что тестовые процедуры должны быть конкретными, он вернулся и тщательно пересчитал, сколько он ввел символов, их было 1287. И он вставил это в процедуру — и теперь произвольное число закреплено в тесте, как кошка в цементе.

Сверхточность не помогает. Когда вы пишете тест, избегайте любой специфики, которая не релевантна идее тестирования. Включайте любые моменты и тонкости, необходимые для того, чтоб сформулировать и объяснить тест, но позвольте будущему тестировщику поупражняться в творчестве и оценке. Позвольте будущему тестировщику внести изменения, которые сохранят процедуру тестирования свежей и эффективной.Интересный способ оценки проекта. Один из.

Слово Канеру:

Одним из важных результатов процесса тестирования является хороший, умный тестировщик.

Мы часто слышим аргументы против любых форм тестирования, результаты которых имеют минимальное или не имеют никакого документирования, как будто единственная ценность тестирования состоит в описании тестов. Это игнорирует важный продукт тестирования — собственно тестировщик.

Хорошие тестировщики всегда учатся. С развитием проекта они все глубже понимают продукт и постепенно увеличивают рефлексы и чувствительность к важным частям проекта. Опытный тестировщик, который прошел один или два цикла релиза, способен тестировать с гораздо большей эффективностью — часто без каких-либо инструкций — по сравнению с неопытным, которому нужны письменные инструкции о том, как и что он проверяет в продукте.

Некоторые консультанты и писатели в нашей области кажется верят в то, что неэффективный тестировщик может стать эффективным только путем следования выданным ему инструкциям. По нашему мнению это плохая практика. Она отражает основополагающее заблуждение о тестировании и о людях, которые тестировать умеют.

Когда оцениваете процесс тестирования — смотрите в первую очередь на тестировщиков проекта. Смотрите на то, как они думают и как это влияет на то, что он делают. Только тогда вы сможете оценить работу продукта, который они производят.Днем услышал фразу, что то типа: "Инициализирует инстанс экземпляра класса объекта". Не дословно, но примерно так. Сперва долго пытался понять смысл фразы. Раз пять переспрашивал: Так все-таки что оно делает-то? Делает-то оно что?

Потом мне, вроде бы, объяснили, чего оно делает. Оставшийся час я выяснял, почему оно ТАК называется. Есть же хорошие простые добрые слова...

Слово Канеру:

Ты не освоишь тестирование пока, ты не изобретешь его.


Не изобретай колеса. Подождите-ка. Разве не изобретение колеса снова и снова чаще всего просходит в истории? Разве это плохо? В конце концов, мы ездим на пневматических шинах, а не на гранитных дисках. Есть тысячи, если не миллионы вариаций на тему колеса. Может быть это урок? Кажется, существует как минимум две причины изобрести что-то снова: адаптировать это к новой ситуации, и изучить как это работает. Мастерство требует и того и другого.

У нас есть коллеги, советующие студентам избегать повторного изобретения тестов или придумывания уже существующих идей по тестированию. Это все равно что наука без экспериментов. Учиться у других – это нормально. Мы считаем, что именно так и важно учиться – если не верите, проверьте название этой книги.

Но если это единственный способ изучения – вы никогда не станете мастером в ремесле тестировщика. Вы будете подмастерьем, не более. Следование инструкциям заведет вас не дальше, чем следование по трассе в направлении Марса. Мы призываем вас изучать тестирование в духе великих механиков и великих программистов: разбирайте все до винтиков, задумывайтесь как они работают, и собирайте обратно подругому. Не ограничивайтесь чужой мудростью, будьте автором своей.

Сначала, ваши тесты, идеи, методы, или документы будут так себе. Это нормально. Просто держите свой мозг включенным, наблюдайте за другими тестировщиками, изучайте, и постоянно оценивайте выхлоп от ваших идей. Если вы хотите преуспеть, практикуйтесь.

Мы годами занимаемся тестированием и мы все еще изобретаем, все еще модифицируем старые идеи. Все коллеги, которых мы уважаем, идут тем же путем.Уже часть третья.

Слово Канеру:

Тестирование сочетает в себе людей, объекты, способы, потенциальные проблемы и оценку.



Главная цель этой части - показать систему классификации техник тестирования. Мы называем это пятью измерениями тестирования. Любой вид тестирования описывается в терминах пяти измерений:

- Тестировщики. Те, кто занимается теcтированием. Например, пользовательское тестирование фокусируется на тестировании силами целевой аудитории, теми, кто обычно использует продукт.
- Покрытие. То, что тестируется. Например, в функциональном тестировании мы тестируем каждую функцию.
- Потенциальные проблемы. Почему мы тестируем (какие риски мы проверяем). Например, тестирование на ошибку с максимальными значениями.
- Активности. Как вы тестируете. Например, исследовательское тестирование.
- Оценка. Как определить, что тест прошел или сработал. Например, сравнение с известным правильным результатом.

Также мы детально описали несколько техник в этой части и понимание того, как использовать еще несколько других, но наша главная цель - объяснить систему классификации.

Во всех тестах есть все пять измерений. Техника тестирования фокусирует ваше внимание на одном из пяти измерений, обходя другие. Вы могли бы комбинировать технику, которая сфокусирована на одном измерении с техникой, которая сфокусирована на другом для достижения требуемого результата. Вы могли бы назвать результат этого действия новой техникой тестирования (некоторые так и делают), но мы думаем, что процесс мышления более полезен, чем добавление новых имен в постоянно расширяющийся перечень непоследовательно определенных техник, используемый в нашей области. Наша схема классификации поможет комбинировать сознательно и вдумчиво.

Задачи тестирования часто концентрируются на одном измерении, но мы работаем во всех пяти. Например:

- Кто-то может попросить вас сделать функциональное тестирование (тщательно поверить все функции). Это говорит вам, что тестировать. Вы все еще должны решить, кто будет тестировать, какие типы багов вы будете искать, как тестировать каждую функцию, и как вы будете определять, что в программе есть ошибка.

- Кто-то может попросить вас повести тестирование "предельных значений" (тест, на ошибки, появляющиеся, когда мы вводим экстремальное значение переменной). Это говорит нам, какой тип проблем мы будем искать. Но нам до сих пор нужно решить, кто тестирует, какие переменные мы будем поверять, и как мы оценим результаты.

- Кто-то может попросить нас заняться бета-тестированием (если есть внешние потребители вашего продукта). Это говорит вам, кто будет тестировать, на какие проблемы вы будете обращать внимание (и какие игнорировать). В некоторых случаях, вы могли бы сообщить бета-тестерам, как распознавать определенные типы проблем, а также попросить их выполнить определенные тесты и пойти определенным путем. В других бета-тестах, вы могли бы оставить на усмотрение бета-тестеров и оценку результатов.

Техники не обязательно соответствуют какому-то одному измерению. Они и не должны: любое тестирование включает все пять измерений, и мы должны ждать от техник тестирования более глубокого охвата измерений.

Вот пример того, как техника может быть многомерной: если кто-то вас просит провести тестирование основанное на требованиях, он говорит тебе о комбинации трех идей:

- Покрытие: мы тестируем все, что описано в требованиях.
- Потенциальные проблемы: тестировать в направлениях, на которых эти требования могут быть не выполнены.
- Оценка: тесты будут спроектированы так, что спецификация будет определять ожидаемое поведение программы.

Разные тестировщики подразумевают разные комбинации этих идей, когда говорят: "тестирование по требованиям". Нет "правильного" понимания этой фразы.

Несмотря на двусмысленность (и, в некоторой степени, благодаря ей), мы находим нашу классификацию хорошим генератором идей.

Сохраняя во время тестирования в голове все пять измерений, вы можете подобрать лучший выбор комбинаций. Например, в бета-тестировании вы могли бы жестко не оговаривать одно или несколько измерений. Вы могли бы не определять способ оценки результатов или последовательности действий. Однако мы предлагаем, чтоб вы сознательно сделали этот выбор, приняв саму технику, а не сосредотачиваясь на каком-либо из аспектов.

Ремарка: неоднозначное понимание тестирования по требованиям дает нам пример главной проблемы в разработке ПО.Слово Канеру:

Техники тестирования основанные на людях



Вот некоторые примеры общих методов, зависящих от того, кто тестирует.


Пользовательское тестирование Тестирование с помощью тех типов людей, которые обычно пользуются вашим продуктом. Оно может быть проведено в любой момент разработки, на вашем или внешнем стенде, особое внимание уделяется мнению, опыту и особенностям пользователя. Некоторые типы пользовательского тестирования, такие как анализ задач, больше похожи на совместное исследование(с участием как минимум одного пользователя и как минимум одного тестировщика), чем на тестирование одним человеком.


Альфа-тест Внутреннее тестирование выполняется командой тестировщиков (и, возможно, других заинтересованных, дружественных инсайдеров).


Бета-тест Использует тестировщиков, которые не являются сотрудниками вашей организации, но являются целевой аудиторией вашего продукта. Продукт во время такого тестирования уже близок к готовности. Многие компании считают, что любой предварительный выпуск версии для клиентов это бета-тестирование. Они называют этап разработки "бета". Это ошибка. Действительно, есть много различных видов бета-тестирования. Бета тестирование дизайна, которое просит пользователей(особенно у экспертов) оценить дизайн продукта, должно пройти как можно раньше, для того, чтоб оставить время внести изменения по результатам тестирования. Маркетинговое бета-тестирование, которое необходимо для того, чтоб уверить крупных клиентов в том, что они должны купить продукт, когда он станет доступным и установить его в своей большой сети, должно выйти достаточно поздно, когда продукт будет уже стабилен. На бета-тесте совместимости заказчики запускают продукт в своем программном и аппаратном окружении - на том, которое вы бы не смогли протестировать самостоятельно. Этот вид тестирования важно провести до того как станет слишком поздно исправлять проблемы совместимости. Для любого вида бета-теста вы должны определить цели до того, как вы начнете планировать и выполнять что-либо.


Удар по багам Внутреннее тестирование с привлечением секретарей, программистов, маркетологов и всех, кого только можно. Обычно оно длится полдня и проводится когда продукт уже близок к релизу. (Замечание: мы описываем эту технику, но не одобряем ее, некоторые компании сочли эту технику полезной, другие нет).

Экспертное тестирование Дайте продукт экспертам в той или иной области ПО и получите от них фидбек (баги, критику и комплименты). Эксперт может быть, но может и не быть тем кто использует продукт - смысл в его знаниях, а не принадлежности к целевой аудитории.

Парное тестирование Два тестировщика ищут баги вместе. Как правило, они используют один компьютер и передают друг другу контроль во время тестирования.

Попробуйте корм вашей собаки Ваша компания может использовать в своей работе релизную или предрелизную версию своего продукта, обычно происходит ожидание того момента, когда продукт будет достаточно надежен, чтоб продать его.День сегодня какой-то неспокойный.

Процитирую Славу П.:

- Кто ее блин создает эту обстановку нервную, которая в проекте? Леша? По Леше можно приборы калибровать!

И еще сэра Терри:
- Нельзя сказать, что Витинари был расистом. Он одинаково ненавидел все расы.
(вроде так)



Слово Канеру:

Техники тестирования основанные на том, что тестируется.



Ты мог бы классифицировать эти техники по иному, как сфокусированные на проблемах, это зависит от того, что ты имеешь в виду, используя эту технику. Например, интеграционное тестирование фич - техника ориентированная на то, что тестируется, если ты используешь ее для проверки каждой фичи - тестирует поведение фичи в связке с другими. И оно же будет техникой, ориентированной на проблемы, если у вас есть идея или предположение о взаимодействии функций и вы хотите проверить эту идею. (Например, это будет тестирование ориентированное на проблемы, если ваша цель в демонстрации ошибки, которая возникает при передаче данных от одной функции к другой.)

Мы отводим много места тестированию областей определений функций в этой главе, так как основанные на этом техники широко используются и очень важны в нашей сфере. Вы должны знать это.

Функциональное тестирование Тестировать функции, одну за другой. Тестируйте функции тщательно, до такой степени, пока вы не сможете с уверенностью сказать, что функция работает. Функциональное тестирование методом белого ящика обычно называется юнит-тестированием и концентрируется на функциях в том виде, в каком мы их видим в коде. Функциональное тестирование черного ящика концентрируется на командах и фичах, которые видит или может использовать пользователь. Желательно проводить функциональное тестирование до того, как будут проводиться более сложные тесты, вовлекающие несколько функций. В сложных тестах первая сломавшаяся функция может остановить весь тест и не позволить вам искать ошибки дальше. Если вы полагаетесь на комплексные испытания, не используя тестирование отдельных функций, вы можете до самого конца не узнать, что одна из функций сломана и тратить огромное количество времени на поиск неисправности в сложном тесте для поиска неисправности в одной маленькой функции.

Интеграционное функциональное тестирование Тестирование совместной работы нескольких функций.

Хождение по меню Проход по всем пунктам меню в графическом интерфейсе пользователя, выбирая каждый пункт меню.

Тестирование областей определений данных Область определения переменной - математическое понятие, включающее все возможные значения переменной какой-либо функции. В тестировании областей определения ты определяешь функции и их переменные. Переменные могут быть входящими и исходящими (с точки зрения математики между ними разницы нет, в тестировании анализ проводится в обоих случаях). Для каждой переменной набор ее значений делится на классы эквивалентности и выбирается небольшой набор примеров (обычно граничных значений) для каждого класса. Допущение метода в том, что вы тестируя несколько примеров для каждого класса, вы можете найти все баги, которые вы нашли бы, тестируя все значения класса. Обратите внимание, что в отличие от функционального тестирования, мы тестируем переменные, а не функции. Многие переменные используются более, чем одной функцией. Тестировщик анализирует переменную, и затем, основываясь на этом анализе, проводит тесты, в которых переменная используется каждой функцией - на входе или на выходе.

Анализ классов эквивалентности Класс эквивалентности это набор значений переменной, которые вы рассматриваете как эквивалентные. Сценарии эквивалентны, если вы верите, что а) они тестируют одно и то же б) если один из них нашел баг, который, скорее всего, найдут и другие в) один из них не нашел баг, которые не найдут и другие. Как только вы нашли класс эквивалентности - протестируйте один или два его члена.

Тестирование граничных значений Класс эквивалентности это набор переменных. Если вы можете отразить их на числовой оси, то граничными значениями будут наибольшие и наименьшие значения класса. В тестировании граничных значений вы тестируете их, а также те граничные значения близлежащих классов, которые лишь ненамного меньше, чем наименьшее значение вашего класса и ненамного больше, чем наибольшее значение вашего класса. Рассмотрим поле ввода, принимающее целые значения от 10 до 50. Значения, представляющие интерес, это: 10(меньшее значение), 9(наибольшее неподходящее значение), 50(наибольшее), 51(наименьшее неподходящее).


Часть втораяЧасть первая

Слово Канеру:

Техники тестирования основанные на том, что тестируется.

Тестирование репрезентативных значений Репрезентативные значения класса эквивалентности те, которые чаще приводили к ошибкам. В тестировании граничных значений - граничные значения всегда наиболее репрезентативны. Но предположим, что вы не можете отобразить класс эквивалентности на числовую ось. Например принтеры Hewlett-Packard PCL-5 являются классом эквивалентности, потому как должны работать одним и тем же образом. Теперь предположим, что для конкретной задачи один из принтеров имеет немного больше шансов заполучить проблему, чем другие. Это принтер и будет репрезентативным значением класса, и если он нас не подведет - не подведут и остальные.

Тестовая матрица для полей ввода Для каждого типа поля ввода ты можешь разработать достаточно стандартный набор кейсов и использовать их в этом и других продуктах. Пример мы приведем далее в этой главе.

Карта и проверка всех способов редактирования полей Часто есть возможность изменить значение переменной несколькими путями. Например, есть способ импортировать данные в поле, ввести значение напрямую, скопировать результат в поле, поле может программно вычисляться и перевычисляться автоматически и так далее. Поле имеет ограничения. Некоторые ограничения могут быть постоянными, друггие могут меняться в зависимости от значений в соседних полях. Например, если J и K - целые положительные числа, они ограничены значениями от 0 до MaxInt. Это постоянное ограничение, зависящее от языка программирования. Предположим, что N тоже положительное целое, N = J + K, и если N=5, то J = 5 − K, и J не может быть больше 5(значение N). Это меняющееся ограничение, чей диапазон допустимых значений зависит от N. Чтоб проверить, что J находится в диапазоне допустимых значений (5-K) мы должны попытаться изменить его значение в каждом возможном направлении.

Логическое тестирование Переменные имеют зависимости в программе. Например, в программе может быть правило, которое говорит, что если PERSON-AGE больше 50 и если SMOKER = YES, то OFFER-INSURANCE должно быть равно NO. Правило выражает логическую зависимость. Логическое тестирование пытается проверить все логические зависимости в программе. График причинно-следственных связей - техника проектирования широкого набора тестов основанных на логике системы.

Тестирование состояний Программа двигается от состояния к состоянию. В данном состоянии некоторые входные данные корректны, другие будут проигнорированы или отклонены. В ответ на валидные входные данные тестируемая программа делает то, что может и не пытается делать то, что не должна. В тестировании состояний мы ходим по программе согласно большому набору переходов между состояниями и тщательно проверяем результаты на каждом шаге.

Тестирование путей Путь включает все шаги, что ты совершил и все состояния через которые прошел, чтоб дойти до текущего состояния. Тестирование путей включает в себя тестирование множества путей в пhограмме. Нельзя проверить все пути в нетривиальной программе. Некоторые тестировщики проводят тестирование "подпутей" - тестирование частей пути. Тестирование базовых путей включает в себя все подпути одного типа, предполагая, что вы тестируете эти длинные пути, чтоб найти ошибки, которые пропустили более мелкие тесты.

Покрытие линий и ветвей кода Вы достигли 100% покрытия, если ваши тесты исполняют каждую линию или ветвь кода программы. Проектирование тестов для достижения покрытия называют "Тестирование основанное на покрытии" (После того, как вы достигли этого вы можете прекратить тестирование или прекратить создание новых тестов). Мы называем это покрытием строк и ветвей кода, чтоб отличить от других типов тестирования, основанных на покрытии. Покрытие конфигураций - отличный пример техники, которая проверяет один и тот же код несколько раз, но при этом все равно может потенциально привести к отличным результатам. Есть много других примеров. Для тестирования основанного на достижении высокого покрытия строк и ветвей кода характерно упущение многих видов ошибок, таких как(но не только) баги с участием пропущенного кода, баги некорректного обращения с граничными значениями, проблемы со временем, проблемы с совместимостью с железом и ПО, баги delayed-fuse, такие как дикие указатели, утечки памяти или stack corruption, которые в конечном счете ведут к переполнению стека, проблемы юзабилити и другие неисправности с точки зрения заказчика. Эта техника является более ценной в плане выявления неполноты тестирования (какой код сейчас не тестируется), как стандарт минимального необходимого объема тестирования. И в действительности опасно, если тестировщики останавливаются только потому, что они достигли определенного процента покрытия (Marick 1999).

Покрытие конфигураций Вам нужно протестировать совместимость 100 принтеров, а вы проверили 10, вы достигли 10% покрытия конфигураций. В общем виде, покрытие конфигураций означает процент конфигураций, на которых запускались и успешно прошли ваши тесты в сравнении с общим числом конфигураций, на котором вы запланировали запустить тесты. Почему мы назвали это техникой тестирования? Обычно мы считаем, что это просто мера - сколько определенных типов тестов мы повели. Однако сами тестировщики создают специальные серии тестов, которые работают с большим объемом конфигураций быстро и просто. В их руках оптимизация тестов для достижения большого покрытия становится техникой.

Тестирование спецификаций Тестирование, сфокусированное на каждом минимальном фактическом требовании к продукту, которое можно получить из спецификаций (Фактическое требование - это то, что для определенного состояния продукта может быть представлено в виде "да" или "нет"). Оно часто включает в себя проверку всех утверждений, сделанных в руководстве пользователя, рекламе, технической литературе или письме заказчику.

Тестирование требований Тестирование сфокусированное на том, насколько программа удовлетворяет требованиям (как вариант доказательство того, что требования выполнить нельзя).

Комбинированное тестирование Тестирование двух или более переменных в комбинации. Мы поговорим об этом позднее в этой главе. Это важный вид тестирования, но многие тестировщики пренебрегают им. Профит от программ обычно заключается как раз во взаимодействии множества переменных и если вы не не учитываете это в тестах, то имеете шанс пропустить множество ошибок, вызванных сочетанием значений нескольких переменных, а не значением одной.Что-то уроки у Сэма пошли немаленькие, быстренько перевести уже не получается, эх.


Слово Канеру:

Техники тестирования, основанные на проблемах сфокусированы на причинах тестирования (каких рисков мы хотим избежать)

Тестирование основанное на рисках имеет по крайней мере два основных значения.

Amland (1999) предоставил замечательное описание менеджмента тестирования основанного на рисках. Согласно его точке зрения, анализ рисков необходим для определения следующих шагов тестирования. Тесты приоритезируются с точки зрения вероятности того, что фича сломается и с точки зрения вероятной цены поломки фичи. И чем больше вероятность поломки, тем важнее тест и тем раньше его нужно проводить.

По другомум мнению, анализ рисков можно делать собственно для поиска ошибок. Когда мы изучаем особенности продукта, мы спрашиваем себя, как он может ломаться. Этот вопрос распадается на на множество дополнительных вопросов, таких как: Как будет выглядеть бага? Почему эта фича сломалась? (Мы опишем наш подход к тестированию основанному на рисках в дополнении к книге)

Оба этих подхода обсуждались в James Bach on Risk-Based Testing (1999c).

Whittaker и Jorgensen (1999 and 2000) предоставили отличное обсуждение и примеры широких классов ошибок, включающих нарушения ограничений:

Ограничения ввода Ограничение на ввод данных, с которыми программа может работать. Если программа работает с 32-разрядными числами, программист должен обеспечить защитные процедуры, которые смогут обнаружить и отклонить ввод более, чем 32-разрядных чисел. Если такого ограничения не будет, то программа упадет при попытке обработать такие числа.

Ограничения вывода Ввод был корректным, но он привел к выходным значениям, которые не могли быть обработаны. Программа может упасть при попытке отобразить, распечатать или сохранить эти данные.

Ограничения компиляции Ввод и вывод корректен, но в ходе расчета выходной величины программа падает. Например, умножение двух больших чисел может дать число, которое программа не может обработать.

Ограничения хранения Входные, выходные и внутренние значения корректны, но запуск программы приводит к переполнению данных или созданию слишком больших файлов.

Whittaker (2002) дал детальные рекомендации по тестированию этих ограничений.

Вот несколько полезных советов для проектирования тестов с учетом риска:

- Вы должны также сделать сопоставимые тесты, не основанные на рисках, для проверки тех рисков, которые вы не изучили достаточно хорошо.
- Тестируйте проблемы связанные со временем. Удивительно, но многие американские образованные тестировщики не учитывают временные проблемы. Классические проблемы сроков включают в себя вопрос гонок, и неожиданный порядок событий.
- Когда вы создаете тест, всегда создавайте процедуру испытаний, заставляющую программу использовать тестовые данные, которые вы ввели и позволяющую вам проверить, корректно ли вы используете данные.


Настроение дня:


Готовая тема попутчика Декстера.Ах, да.
Благодаря конторе и начальству еду на sqa days 10. Еще едут 2 тестировщицы.
Хорошо.

Екб, кто-нибудь еще будет там?
Не екб: Феликс? Редфокс? Думтест? Кто там еще-то... Вас увижу?

4-го буду в мск. Там есть что-нибудь интересное?

Слово Канеру:

Техники тестирования основанные на том, как вы тестируете.


Регрессионное тестирование Регрессионное тестирование включает в себя переиспользование однажды уже созданных и проведенных тестов после изменений в продукте. Вы поводите регрессионное тестирование фикса после того, как узнали о том, что баг был исправлен. Цель регрессионного тестирования в том, чтобы убедиться, что баги исправлены и изменения не внесли новых ошибок в старый функционал. Побочный эффект регрессии называется стабилизация, включающая перетестирование важных частей продукта. Цель в том, чтоб доказать, что предыдущие изменения не сломали важных компонент продукта.

Тестирование по плану Ручное тестирование, обычно выполняемое новичками, которые шаг за шагом следуют плану тестирования, написанному старшим тестировщиком.

Смок-тест Это тип регрессионного тестирования выполняется с целью проверить, готов ли новый билд к тестированию. Смок-тест часто автоматизируется и стандартизируется. Он проверяет вещи, которые должны работать, и если они не функционируют, то мы подозреваем, что программа была создана полностью некорректно.


Исследовательское тестирование Мы ждем, что тестировщик знает весь проект, продукт, целевую аудиторию, риски, сценарии, которые привели к предыдущим сбоям, Новые тесты постоянно создаются и используются. Они гораздо эффективней, чем старые, так как основываются на том, что тестировщик постоянно увеличивает объем знаний о проекте.

Партизанское тестирование Быстрая и грязная атака продукта. Форма исследовательского тестирования, ограниченная во времени, выполняемая опытным тестировщиком-исследователем. Например старший тестировщик может потратить один день на область, которая в противном случае игнорировалась бы. Он пробует на продукте самые мощные свои атаки. И если находит серьезную проблему, то область будет перетестирована и может быть изменен весь план тестирования. Если он не находит проблем, то и в дальнейшем область будет игнорироваться или походить лишь небольшие испытания.

Тестирование по сценарию Обычно обладает четырьмя атрибутами. 1) Тесты должны быть реалистичны. Они должны повторять то, что обычно делают с продуктом заказчики. 2) Тесты должны быть сложными, включать в себя использование нескольких функций. 3) По ним должно быть просто определить, прошла программа тест или нет. 4) Заинтересованные лица должны согласиться, что программа должна быть исправлена если не выдержит этой проверки. Тест, обладающий всеми четырьмя атрибутами будет убедительным, и давать на выходе реальные баги. Однако вам придется долго создавать и поддерживать качественные сценарии.

Тестирование по сценарию (прим. w_bf: это не я ошибся, это у Канера повтор) Тесты, основанные на кейсах использования продукта обычно называют тестами по сценарию (Jacobson 1992, Collard 1999) или юзкейс-тестами. (Многие люди классифицировали бы их как тесты основанные на покрытии важных сценариев использования)

Тестирование установки Установка ПО различными путями на различных системах. Проверка того, какие файлы добавлены и изменены на диске. Работает ли установленная программа? Что случится при удалении программы?

Стресс тестирование Тестирование системы, находящейся под атакой\нагрузкой и требующей для работы большого количества ресурсов. Под высокой нарузкой система имеет высокую вероятность падения, но картина событий, предшествующих падению может указывать на уязвимость в ПО, которая может быть использована. Asbock (2000) - отличная инструкция по нагрузочному тестированию.

Тестирование длинных последовательностей Выполняется всю ночь или весь день или всю неделю. Цель - обнаружить ошибки, которые не смогли найти короткие последовательности тестов. Пример ошибок, которые находят таким образом - дикие указатели, утечки памяти, переполнения стека, плохое взаимодействие нескольких функций. Часто такой вид тестирования называют продолжительным тестированием, тестированием выносливости или испытанием на надежность.

Тестирование производительности Такие тесты проводят для определения того, как быстро работает программа, чтоб решить, нуждается ли ПО в оптимизации. Но такие тесты могут найти и многие другие баги. Значительные изменения в производительности по сравнению с предыдущим релизом могут идентифицировать эффект от ошибки в программе. Например, если проверите, как долго работает некая функция сегодня, а затем проверите то же самое завтра, вы вероятно, сможете проверить это вместе с программистом и написать отчет об ошибке, в случае если тест прошел значительно быстрее или медленнее. Либо считать эти изменения подозрительными, так как произошли фундаментальные изменения в программе.
Sam Guckenheimer заметил: "Разница в производительности также может означать изменения в сторонних компонентах ПО или изменения в конфигурации. Например изменения в JVM с различными релизами JDK. Так тестирование производительности может даль удивительные результаты, даже если ваш код не менялся вообще."